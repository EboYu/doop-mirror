buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'commons-io:commons-io:2.4'
    }
}

apply plugin: 'antlr'
apply plugin: 'application'
apply plugin: 'groovy'

apply from  : 'benchmarks.gradle'

//applicationDefaultJvmArgs = ["-Xmx2048m"]
sourceCompatibility = "1.8"
targetCompatibility = "1.8"

group = 'org.clyze'
version = '1.0-SNAPSHOT'

//For the doop app
mainClassName = 'org.clyze.doop.Main'


task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

repositories {

    mavenCentral()

    maven {
        url "http://centauri.di.uoa.gr:8081/artifactory/plast-public"
    }
}

task printClasspath {
    doLast {
        configurations.compile.each { println it }
    }
}

dependencies {
compile 'org.codehaus.groovy:groovy-all:2.4.7',             // Groovy
            'commons-logging:commons-logging:1.1',              // Logging wrapper
            'log4j:log4j:1.2.14',                               // Logging implementation
            'commons-cli:commons-cli:1.2',                      // Command line processor
            'commons-io:commons-io:2.4',                        // File Utils
            'org.apache.ivy:ivy:2.3.0',                         // Apache Ivy (for downloading jars from maven repos)
            'org.ow2.asm:asm-debug-all:5.1',                    // Java Bytecode library
            'org.smali:dexlib2:2.2b4',                          // Dexlib2: library for reading/modifying/writing Android dex files
            'com.google.code.gson:gson:2.4'                     // GSON library

    compile group: 'com.google.guava', name: 'guava', version: '21.0'


    // Soot is a compile time dependency
    compile 'ext:AXMLPrinter:2.0',
            "ext:sootclasses:2.+",
            "ext:soot-infoflow:1.+",
            "ext:soot-infoflow-android:1.+"

    compile 'org.clyze:clue-common:1.+'

    compile(group: 'sun', name: 'jhat', version: 'PATCHED')

    // JPhantom is a runtime dependency
    runtime 'org.clyze:jphantom:1.2'
    runtime 'ext:averroes-no-properties:1.0-SNAPSHOT',
            'ext:herosclasses:1.1',
            'ext:axml:2.0',
            'org.smali:util:2.2b4'                              // Dexlib2 utilities

    // DeepDoop
    antlr   'org.antlr:antlr4:4.5.1-1'
    compile 'org.antlr:antlr4-runtime:4.5.1-1'
    testCompile 'junit:junit:4.12',
            'org.spockframework:spock-core:1.0-groovy-2.4'
}

task generateFiles(type: JavaExec) {
    description 'Generate the doop.properties file'
    group = 'Other'
    main = 'org.clyze.doop.FileGenerator'
    classpath = sourceSets.main.runtimeClasspath
    args = [
        projectDir
    ]
}

task bytecode2jimple(type: JavaExec) {
    description 'Generate Jimple/Shimple'
    group = 'Other'
    main = 'org.clyze.doop.soot.Main'
    classpath = sourceSets.main.runtimeClasspath
    if (!project.hasProperty('args') || project.property('args').isEmpty()) {
        args "--bytecode2jimpleHelp -allow-phantom-refs"
    } else {
        args = ["--bytecode2jimple"] + project.property('args').tokenize()
    }
}

applicationDistribution.from(file("$projectDir/logic")) {
    into 'logic'
}

applicationDistribution.from(projectDir) {
    include 'doop.properties', 'LICENSE'
}


run {
    //We set the DOOP_HOME environment variable (see org.clyze.doop.Main)
    environment.DOOP_HOME = projectDir
    if (project.hasProperty('args')) {
        args project.property('args').split()
    }
}

task deepdoop(type: JavaExec) {
    description 'Run DeepDoop'
    group = 'Other'
    main = 'org.clyze.deepdoop.Main'
    classpath = sourceSets.main.runtimeClasspath
    enableAssertions = true
    if(project.hasProperty("args")) {
        args project.property("args").split()
    }
}

startScripts {
    dependsOn generateFiles
}

compileJava {
    options.compilerArgs << '-Xlint:unchecked'
}

import org.apache.commons.io.FileUtils

clean.doFirst {
    def out = System.getenv('DOOP_OUT') ?: "${projectDir}/out"
    file(out      ).list().each { f -> delete "$out/$f" }
    file('logs'   ).list().each { f -> delete "logs/$f" }
    file('results').list().each { f -> delete "results/$f" }
    FileUtils.deleteQuietly(new File('last-analysis'))
}

if (project.hasProperty('artifactory_user')) {

    apply plugin: 'maven-publish'

    //Generate a jar with the logic files
    task logicJar(type:Jar) {
        from "$projectDir/logic"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact logicJar {
                    classifier "logic"
                }
            }
        }

        repositories {
            maven {
                credentials {
                    username artifactory_user
                    password artifactory_password
                }

                url version.endsWith("-SNAPSHOT") ?
                        "${artifactory_contextUrl}/libs-snapshot-local" :
                        "${artifactory_contextUrl}/libs-release-local"
            }
        }
    }
}
