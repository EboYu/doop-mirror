#include "macros.logic"

/**
 * Information flow through primitive operations
*/

// when a tainted variable is "used" by primitive operations
// the output of the primitive operations is also tainted

//VarIsTaintedFromVar(?to, ?from) <-
//  VarDef(?to, ?insn),
//  VarUse(?from, ?insn).

//VarDef(?to, ?insn) <-
//  AssignInstruction:To[?insn] = ?to,
//  (AssignBinop:Insn(?insn) ; AssignUnop:Insn(?insn)).
AnyMethodInvocation(?invocation, ?tomethod) <-
   StaticMethodInvocation(?invocation, ?tomethod, _).

AnyMethodInvocation(?invocation, ?tomethod) <-
   VirtualMethodInvocation(?invocation, ?tomethod, _).

AnyMethodInvocation(?invocation, ?tomethod) <-
   MethodInvocation:Signature[?invocation] = ?tomethod,
   SpecialMethodInvocation:Insn(?invocation).

TaintSourceMethod(?overriddenMethod) <-
   TaintSourceMethod(?method),
   Method:DeclaringType[?method] = ?superclass,
   Method:SimpleName[?method] = ?name,
   Method:Descriptor[?method] = ?descriptor,
   SubtypeOf(?class, ?superclass),
   ClassType(?class),
   Method:DeclaringType[?overriddenMethod] = ?class,
   Method:SimpleName[?overriddenMethod] = ?name,
   Method:Descriptor[?overriddenMethod] = ?descriptor.

LeakingSinkMethod(?n, ?overriddenMethod) <-
   LeakingSinkMethod(?n, ?method),
   Method:DeclaringType[?method] = ?superclass,
   Method:SimpleName[?method] = ?name,
   Method:Descriptor[?method] = ?descriptor,
   SubtypeOf(?class, ?superclass),
   ClassType(?class),
   Method:DeclaringType[?overriddenMethod] = ?class,
   Method:SimpleName[?overriddenMethod] = ?name,
   Method:Descriptor[?overriddenMethod] = ?descriptor.


VarUse(?from, ?insn) <- AssignOper:From(?insn, ?from).

TaintedVarTaintedFromVar(?toCtx, ?to, ?hctx, ?value, ?type) <-
   VarIsTaintedFromVar(?type, ?toCtx, ?to, ?fromCtx, ?from),
   TaintedVarPointsTo(?hctx, ?value, ?fromCtx, ?from).

TaintedValueTransferred(?value, ?type, ?newvalue),
TaintedContextValue(?hctx, ?newvalue),
VarPointsTo(?hctx, ?newvalue, ?toCtx, ?to) <-
  TaintedVarTaintedFromVar(?toCtx, ?to, ?hctx, ?value, ?type).

TaintedValueTransferred(?value, ?type, ?newvalue),
TaintedContextValue(?hctx, ?newvalue),
VarPointsTo(?hctx, ?newvalue, ?toCtx, ?to) <-
   VarIsTaintedFromValue(?type, ?hctx, ?value, ?toCtx, ?to).
   

CallTaintingMethod(?ctx, ?invocation) <-
   TaintSourceMethod(?tomethod),
   MethodInvocationInContext(?ctx, ?invocation, ?tomethod).

/**
 * Information flow through complex relations
 */
StringFactoryType(?type) <-
  Type:Id(?type:"java.lang.String") ;
  Type:Id(?type:"java.lang.StringBuffer") ;
  Type:Id(?type:"java.lang.StringBuilder").

StringFactoryVar(?var) <-
  Var:Type[?var] = ?type,
  StringFactoryType(?type).

StringFactoryVarPointsTo(?factoryHctx, ?factoryValue, ?ctx, ?var) <-
  VarPointsTo(?factoryHctx, ?factoryValue, ?ctx, ?var),
  StringFactoryVar(?var).

Iaminterested4(?type, ?ctx, ?base, ?ctx, ?param),
VarIsTaintedFromVar(?type, ?ctx, ?base, ?ctx, ?param) <-
  Var:Type[?base] = ?type,
  VirtualMethodInvocation:SimpleName[?invocation] = "append",
  VirtualMethodInvocation:Base[?invocation] = ?base,
  StringFactoryVarPointsTo(_, _, ?ctx, ?base),
  ActualParam[0, ?invocation] = ?param.

Iaminterested5(?type, ?ctx, ?base, ?ctx, ?param),
VarIsTaintedFromVar(?type, ?ctx, ?base, ?ctx, ?param) <-
   Var:Type[?base] = ?type,
   SpecialMethodInvocation:SimpleName[?invocation] = "<init>",
   SpecialMethodInvocation:Base[?invocation] = ?base,
   StringFactoryVarPointsTo(_, _, ?ctx, ?base),
   ActualParam[0, ?invocation] = ?param.

Iaminterested10(?type, ?ctx, ?ret, ?ctx, ?base),
Iaminterested6(?type, ?ctx, ?ret, ?ctx, ?param),
VarIsTaintedFromVar(?type, ?ctx, ?ret, ?ctx, ?base),
VarIsTaintedFromVar(?type, ?ctx, ?ret, ?ctx, ?param) <-
  Var:Type[?ret] = ?type,
  VirtualMethodInvocation:SimpleName[?invocation] = "append",
  VirtualMethodInvocation:Base[?invocation] = ?base,
  StringFactoryVarPointsTo(_, _, ?ctx, ?base),
  ActualParam[0, ?invocation] = ?param,
  AssignReturnValue[?invocation] = ?ret.

// Enums

MethodReturningStringFactory(?tomethod) <-
  Method:ReturnType[?tomethod] = ?stringFactoryType,
  StringFactoryType(?stringFactoryType).

VirtualMethodInvocationOpt(?invocation, ?tomethod) <-
   VirtualMethodInvocation(?invocation, ?tomethod, _).

StringFactoryReturnInvocation(?invocation) <-
   VirtualMethodInvocationOpt(?invocation, ?tomethod),
   MethodReturningStringFactory(?tomethod).

VarIsTaintedFromVar(?type, ?ctx, ?var, ?ctx, ?var) -> Type(?type), Context(?ctx), Var(?var).

Iaminterested8(?type, ?ctx, ?ret, ?ctx, ?base),
VarIsTaintedFromVar(?type, ?ctx, ?ret, ?ctx, ?base) <-
  Var:Type[?ret] = ?type,
  StringFactoryReturnInvocation(?invocation),
  VirtualMethodInvocation:Base[?invocation] = ?base,
  StringFactoryVarPointsTo(_, _, ?ctx, ?base),
  AssignReturnValue[?invocation] = ?ret.

VarIsTaintedFromValue(?type, ?hctx, ?value, ?ctx, ?var) -> Type(?type), HContext(?hctx), Value(?value), Context(?ctx), Var(?var).

Iaminterested(?componentType, ?basehctx, ?basevalue, ?ctx, ?to),
VarIsTaintedFromValue(?componentType, ?basehctx, ?basevalue, ?ctx, ?to) <-
   LoadHeapArrayIndex(?ctx, ?to, ?basehctx, ?basevalue),
   Value:Type[?basevalue] = ?arrayType,
   ComponentType[?arrayType] = ?componentType,
   TaintedContextValue(?basehctx, ?basevalue).

Iaminterested7(?type, ?ctx, ?ret, ?ctx, ?base),
VarIsTaintedFromVar(?type, ?ctx, ?ret, ?ctx, ?base) <-
  MethodInvocationInContext(?ctx, ?invocation, "<java.util.Enumeration: java.lang.Object nextElement()>"),
  VirtualMethodInvocation:Base[?invocation] = ?base,
  AssignReturnValue[?invocation] = ?ret,
  OptAssignCast(?type, _, ?ret).


/**
 * Sanitization TODO
 */


MethodInvocationInContext(?ctx, ?invocation, ?tomethod) -> Context(?ctx), MethodInvocation(?invocation), Method(?tomethod).

// Option 1
//MethodInvocationInContext(?ctx, ?invocation, ?tomethod) <-
//   CallGraphEdge(?ctx, ?invocation, _, ?tomethod).

// Option 2

AnyMethodInvocationOpt(?tomethod, ?invocation) <- AnyMethodInvocation(?invocation, ?tomethod).

MethodInvocationInMethod(?tomethod, ?invocation, ?inmethod) <-
   AnyMethodInvocationOpt(?tomethod, ?invocation),
   Instruction:Method[?invocation] = ?inmethod.

MethodInvocationInContext(?ctx, ?invocation, ?tomethod) <-
   MethodInvocationInMethod(?tomethod, ?invocation, ?inmethod),
   ReachableContext(?ctx, ?inmethod).
                             
/**
 * Sinks and leaks
 */
LeakingSinkVariable(?invocation, ?ctx, ?var) <-
  MethodInvocationInContext(?ctx, ?invocation, ?tomethod),
  LeakingSinkMethod(?index, ?tomethod),
  ActualParam[?index, ?invocation] = ?var.

LeakingTaintedInformation(?ctx, ?invocation, ?hctx, ?source) <-
  TaintedVarPointsTo(?hctx, ?value, ?ctx, ?var),
  LeakingSinkVariable(?invocation, ?ctx, ?var),
  SourceFromTaintedValue[?value] = ?source.

/**
 * Special Heap allocation on function call
 */
RecordMacro(?ctx, ?value, ?hctx),
TaintedContextValue(?hctx, ?value),
TaintedValueIntroduced(?invocation, ?retType, ?value),
VarPointsTo(?hctx, ?value, ?ctx, ?to) <-
  TaintSourceMethod(?tomethod),
  MethodInvocationInContext(?ctx, ?invocation, ?tomethod),
  AssignReturnValue[?invocation] = ?to,
  Method:ReturnType[?tomethod] = ?retType.

TaintedVarPointsTo(?hctx, ?value, ?ctx, ?var) <-
  VarPointsToOpt(?ctx, ?var, ?hctx, ?value),
  TaintedContextValue(?hctx, ?value).

VarPointsToOpt(?ctx, ?var, ?hctx, ?value) <-
  VarPointsTo(?hctx, ?value, ?ctx, ?var).
